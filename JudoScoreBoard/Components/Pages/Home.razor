@page "/"
@using System.Timers
@implements IAsyncDisposable
@inject HotKeys HotKeys
@using Toolbelt.Blazor.HotKeys2
@inject IJSRuntime JsRuntime;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject ScoreBoard ScoreBoard


<audio id="sound" src="Sounds/bell.mp3"/>

@if (showModal)
{
    <div class="modal-backdrop-ui">
        <div class="modal-content-ui">
            <h4>Ajustar Tempo</h4>
            <div class="modal-content-time"> @ScoreBoard.GetMatchTime().ToString("mm\\:ss")</div>
            <div style="display: flex; gap: 10px; flex-wrap: wrap; justify-content: center; margin-top: 1rem;">
                <button class="fancy-button" @onclick="() => AdjustTime(60)">+1 min</button>
                <button class="fancy-button" @onclick="() => AdjustTime(-60)">-1 min</button>
                <button class="fancy-button" @onclick="() => AdjustTime(10)">+10 sec</button>
                <button class="fancy-button" @onclick="() => AdjustTime(-10)">-10 sec</button>
                <button class="fancy-button" @onclick="() => AdjustTime(1)">+1 sec</button>
                <button class="fancy-button" @onclick="() => AdjustTime(-1)">-1 sec</button>
                <button class="fancy-button" @onclick="TogglePanel">Fechar</button>
            </div>

        </div>
    </div>
}
<div class="full-page" style="background-color: @_bgColour">
    <div class="scoreboard-container">

        <div class="scoreboard-side white-side">

            <div class="score-value-row @flashWhiteClass">
                <div class="score-value"
                     @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Ippon, Player.White))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Ippon, Player.White))">
                    @ScoreBoard.GetScoreWhite(Score.Ippon)
                </div>
                <div class="score-value"
                     @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Wazari, Player.White))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Wazari, Player.White))">
                    @ScoreBoard.GetScoreWhite(Score.Wazari)
                </div>
                <div class="score-value"
                     @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Yuko, Player.White))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Yuko, Player.White))">
                    @ScoreBoard.GetScoreWhite(Score.Yuko)
                </div>
                @* <div class="score-value" @oncontextmenu="@(() => RemoveShido(_scoreWhite, _scoreBlue))" *@
                @* @oncontextmenu:preventDefault @onclick="@(() => AddShido(_scoreWhite, _scoreBlue))"> *@
                @* <img src="@ShidoImages[ScoreBoard.GetScoreWhite(Score.Shido)]" alt="" width="100px"> *@
                @* </div> *@
            </div>
        </div>
        <div class="scoreboard-side blue-side" style=" color: white">
            <div class="score-value-row @flashBlueClass">
                <div class="score-value"
                     @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Ippon, Player.Blue))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Ippon, Player.Blue))">
                    @ScoreBoard.GetScoreBlue(Score.Ippon)
                </div>
                <div class="score-value"
                     @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Wazari, Player.Blue))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Wazari, Player.Blue))">
                    @(ScoreBoard.GetScoreBlue(Score.Wazari))
                </div>
                <div class="score-value"
                     @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Yuko, Player.Blue))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Yuko, Player.Blue))">
                    @(ScoreBoard.GetScoreBlue(Score.Yuko))
                </div>
                @* <div class="score-value" @oncontextmenu="@(() => RemoveShido(_scoreBlue, _scoreWhite))" *@
                @*      @oncontextmenu:preventDefault *@
                @*      @onclick="@(() => AddShido(_scoreBlue, _scoreWhite))"><img src="@ShidoImages[ScoreBoard.GetScoreBlue(Score.Shido)]" *@
                @*                                                                 alt="" *@
                @*                                                                 width="100px"></div> *@
            </div>
        </div>

    </div>
    <div class="timer-bar" style="background-color: @_bgColour;">
        @* <div class="col-3" style="text-align: center; height: 200px;" *@
        @*      @onclick='()=> ToggleOsaekomi("white")'> *@
        @*     <div hidden="@(_hiddenWhite)"> @_osaekomiCount</div> *@
        @* </div> *@
        <div @onclick="ToogleMatchTimer" class="col-6 vh-40 align-middle text-center user-select-none">
            <div>@ScoreBoard.GetMatchTime().ToString("mm\\:ss")</div>
            <div style="font-size: 1rem;margin-top: -1rem">@(ScoreBoard.Timer._isGoldenScore ? "GOLDEN SCORE" : "")</div>
        </div>
        @* <div class="col-3" style="text-align: center; height: 200px;" *@
        @*      @onclick='()=> ToggleOsaekomi("blue")'> *@
        @*     <div hidden="@(_hiddenBlue)"> *@
        @*         @_osaekomiCount *@
        @*     </div> *@
        @* </div> *@
    </div>

</div>


@code {

    private HotKeysContext? _hotKeysContext;

    private bool showModal = false;

    private const int SHIDO = 3;
    private List<int> _scoreBlue = new() { 0, 0, 0, 0 };
    private List<int> _scoreWhite = new() { 0, 0, 0, 0 };
    private string _bgColour;

    private Timer _osaekomiTimer;
    private bool _hiddenWhite = true;
    private bool _hiddenBlue = true;
    private string _currentOsaekomiTori = "";
    private int _osaekomiCount = 0;
    private bool _isOsaekomiEnabled = false;
    private string ShidoImage;

    private string[] ShidoImages =
    [
        "",
        "/Images/OneShido.png",
        "/Images/TwoShido.png",
        "/Images/Hansokumake.png"
    ];

    private string flashWhiteClass = "";
    private string flashBlueClass = "";

    private async Task TriggerWhiteFlash()
    {
        flashWhiteClass = "flash-effect";
        await InvokeAsync(StateHasChanged);

        await Task.Delay(3000); // 3 flashes × 0.5s
        flashWhiteClass = "";
        await InvokeAsync(StateHasChanged);
    }

    private void Refresh()
    {
        
        SetTimerBackground(ScoreBoard.Timer.IsTimerRunning());
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ScoreBoard.Timer.OnTimeChanged -= Refresh;
        ScoreBoard.Timer.StopTimer();
    }

    private async Task TriggerBlueFlash()
    {
        flashBlueClass = "flash-effect";
        await InvokeAsync(StateHasChanged);

        await Task.Delay(3000); // 3 flashes × 0.5s
        flashBlueClass = "";
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _hotKeysContext = HotKeys.CreateContext()
                .Add(ModCode.Ctrl, Code.T, TogglePanel);

            var startingTime = await localStorage.GetItemAsync<TimeSpan>("timer");
            if (startingTime is { Minutes: 0, Seconds: 0 })
            {
                startingTime = TimeSpan.FromMinutes(4);
            }

            ScoreBoard.Timer.InitializeTimer(startingTime);


            StateHasChanged(); // Refresh UI
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ScoreBoard.Timer.OnTimeChanged += Refresh;

        _bgColour = "red";


        await InvokeAsync(StateHasChanged);
    }

    // _osaekomiTimer.Elapsed += async (object? sender, ElapsedEventArgs e) =>
    // {
    //     _osaekomiCount++;
    //
    //     if (_isGoldenScore)
    //     {
    //         if (_osaekomiCount is >= 5)
    //         {
    //             if (_currentOsaekomiTori == "blue")
    //             {
    //                 await IncreaseYukoScore(_scoreBlue);
    //             }
    //
    //             if (_currentOsaekomiTori == "white")
    //             {
    //                 await IncreaseYukoScore(_scoreWhite);
    //             }
    //         }
    //     }
    //
    //     if (_osaekomiCount is >= 10 and < 20)
    //     {
    //         if (_scoreBlue[WAZARI] == 1 && _currentOsaekomiTori == "blue")
    //         {
    //             _scoreBlue[WAZARI] = 0;
    //             await IncreaseIpponScore(_scoreBlue);
    //         }
    //
    //         if (_scoreWhite[WAZARI] == 1 && _currentOsaekomiTori == "white")
    //         {
    //             _scoreWhite[WAZARI] = 0;
    //             await IncreaseIpponScore(_scoreWhite);
    //         }
    //
    //         _isOsaekomiEnabled = false;
    //     }
    //
    //     if (_osaekomiCount >= 20)
    //     {
    //         _osaekomiTimer.Stop();
    //         await JsRuntime.InvokeAsync<string>("PlayAudio", "sound");
    //
    //         if (_currentOsaekomiTori == "blue")
    //         {
    //             await IncreaseIpponScore(_scoreBlue);
    //         }
    //         else
    //         {
    //             await IncreaseIpponScore(_scoreWhite);
    //         }
    //
    //         _isOsaekomiEnabled = false;
    //     }
    //
    //     await InvokeAsync(StateHasChanged);
    // };
    @* } *@

    

    // private async Task ToggleOsaekomi(string tori)
    // {
    //     if (!_osaekomiTimer.Enabled && _timer.Enabled)
    //     {
    //         _osaekomiTimer.Start();
    //         _isOsaekomiEnabled = true;
    //         _osaekomiCount = 0;
    //     }
    //     else if ((_currentOsaekomiTori == tori || !_timer.Enabled) && _osaekomiTimer.Enabled)
    //     {
    //         _osaekomiTimer.Stop();
    //         _isOsaekomiEnabled = false;
    //         if (_osaekomiCount >= 5 && _osaekomiCount < 10)
    //         {
    //             if (_currentOsaekomiTori == "blue")
    //             {
    //                 _scoreBlue[YUKO]++;
    //             }
    //             else
    //             {
    //                 _scoreWhite[YUKO]++;
    //             }
    //         }
    //
    //         if (_osaekomiCount >= 10 && _osaekomiCount < 20)
    //         {
    //             if (_currentOsaekomiTori == "blue")
    //             {
    //                 _scoreBlue[WAZARI]++;
    //             }
    //             else
    //             {
    //                 _scoreWhite[WAZARI]++;
    //             }
    //         }
    //
    //         if (_currentCount == TimeSpan.Zero)
    //         {
    //             await StopTime();
    //         }
    //     }
    //
    //     if (tori == "white")
    //     {
    //         _hiddenBlue = true;
    //         _hiddenWhite = false;
    //     }
    //
    //     if (tori == "blue")
    //     {
    //         _hiddenBlue = false;
    //         _hiddenWhite = true;
    //     }
    //
    //     _currentOsaekomiTori = tori;
    //     await CheckWinner();
    // }

    // private void ToggleTime()
    // {
    //     if (!string.IsNullOrWhiteSpace(_winner))
    //     {
    //         return;
    //     }
    //
    //     if (_bgColour == "red")
    //     {
    //         _bgColour = _isGoldenScore ? "#d6b031" : "green";
    //     }
    //     else
    //     {
    //         _bgColour = "red";
    //     }
    //
    //     _timer.Enabled = !_timer.Enabled;
    //     if (_timer.Enabled)
    //     {
    //         _hiddenBlue = true;
    //         _hiddenWhite = true;
    //     }
    //
    //     _osaekomiTimer.Stop();
    // }

    // private async Task StopTime()
    // {
    //     _bgColour = "red";
    //     _timer.Enabled = false;
    //     _osaekomiTimer.Stop();
    // }

    // private async Task AddShido(List<int> score, List<int> otherScore)
    // {
    //     if (score[SHIDO] > 3)
    //     {
    //         return;
    //     }
    //
    //     ShidoImage = ShidoImages[score[SHIDO]++];
    //     if (score[SHIDO] == 3)
    //     {
    //         await IncreaseIpponScore(otherScore);
    //     }
    // }
    //
    // private void RemoveShido(List<int> score, List<int> otherScore)
    // {
    //     if (score[SHIDO] <= 0)
    //     {
    //         return;
    //     }
    //
    //     if (score[SHIDO] == 3)
    //     {
    //         DecreaseIpponScore(otherScore);
    //     }
    //
    //     ShidoImage = ShidoImages[--score[SHIDO]];
    // }
    //
    private void TogglePanel()
    {
        showModal = !showModal;
        StateHasChanged();
    }

    private async Task AdjustTime(int deltaSeconds)
    {
        var newDefaultTimer = ScoreBoard.SetMatchTime(deltaSeconds);

        await localStorage.SetItemAsync("timer", newDefaultTimer);

        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
    }

    public async ValueTask DisposeAsync()
    {
        if (_hotKeysContext is not null)
        {
            await _hotKeysContext.DisposeAsync();
        }
    }

    private void ToogleMatchTimer()
    {
        var isTimerRunning = ScoreBoard.Timer.ToggleTimer();
        SetTimerBackground(isTimerRunning);

        InvokeAsync(StateHasChanged);
    }

    private void SetTimerBackground(bool isTimerRunning)
    {
        var runningColour = ScoreBoard.Timer._isGoldenScore ? "#d6b031": "green";
        _bgColour = isTimerRunning ?  runningColour : "red";
    }

}
