@page "/"
@using System.Timers
@implements IAsyncDisposable
@inject HotKeys HotKeys
@using Toolbelt.Blazor.HotKeys2

@if (showModal)
{
    <div class="modal-backdrop-ui">
        <div class="modal-content-ui">
            <h4>Ajustar Tempo</h4>
            <div class="modal-content-time"> @_currentCount.ToString("mm\\:ss")</div>
            <div style="display: flex; gap: 10px; flex-wrap: wrap; justify-content: center; margin-top: 1rem;">
                <button class="fancy-button" @onclick="() => AdjustTime(60)">+1 min</button>
                <button class="fancy-button" @onclick="() => AdjustTime(-60)">-1 min</button>
                <button class="fancy-button" @onclick="() => AdjustTime(10)">+10 sec</button>
                <button class="fancy-button" @onclick="() => AdjustTime(-10)">-10 sec</button>
                <button class="fancy-button" @onclick="() => AdjustTime(1)">+1 sec</button>
                <button class="fancy-button" @onclick="() => AdjustTime(-1)">-1 sec</button>
                <button class="fancy-button" @onclick="TogglePanel">Fechar</button>
            </div>

        </div>
    </div>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-6 vh-60 bg-white user-select-none" style="padding-right: 50px">
            <div class="row" style="font-size: 5em;text-align: center; margin-top: 50px">
                <div class="col-3"></div>
                <div class="col-3">I</div>
                <div class="col-3">W</div>
                <div class="col-3">Y</div>
            </div>
            <div class="row" style="font-size: 20em;text-align: center; vertical-align: center;margin-top: -100px">
                <div class="col-3" @oncontextmenu="@(() => RemoveShido(_scoreWhite))" @oncontextmenu:preventDefault @onclick="@(() => AddShido(_scoreWhite))"><img src="@ShidoImages[_scoreWhite[SHIDO]]" alt="" width="100px"></div>
                <div class="col-3" @oncontextmenu="@(() => DecreaseIpponScore(_scoreWhite))" @oncontextmenu:preventDefault @onclick="@(() => IncreaseIpponScore(_scoreWhite))">@(_scoreWhite[2])</div>
                <div class="col-3" @oncontextmenu="@(() => DecreaseWazariScore(_scoreWhite))" @oncontextmenu:preventDefault @onclick="@(() => IncreaseWazariScore(_scoreWhite))">@(_scoreWhite[1])</div>
                <div class="col-3" @oncontextmenu="@(() => DecreaseYukoScore(_scoreWhite))" @oncontextmenu:preventDefault @onclick="@(() => IncreaseYukoScore(_scoreWhite))">@(_scoreWhite[0])</div>
            </div>
        </div>
        <div class="col-6 vh-60 bg-primary user-select-none" style=" color: white">
            <div class="row" style="font-size: 5em;text-align: center; margin-top: 50px">
                <div class="col-3">I</div>
                <div class="col-3">W</div>
                <div class="col-3">Y</div>
            </div>
            <div class="row" style="font-size: 20em;text-align: center; vertical-align: center;margin-top: -100px">
                <div class="col-3" @oncontextmenu="@(() => DecreaseIpponScore(_scoreBlue))" @oncontextmenu:preventDefault @onclick="@(() => IncreaseIpponScore(_scoreBlue))">@(_scoreBlue[2])</div>
                <div class="col-3" @oncontextmenu="@(() => DecreaseWazariScore(_scoreBlue))" @oncontextmenu:preventDefault @onclick="@(() => IncreaseWazariScore(_scoreBlue))">@(_scoreBlue[1])</div>
                <div class="col-3" @oncontextmenu="@(() => DecreaseYukoScore(_scoreBlue))" @oncontextmenu:preventDefault @onclick="@(() => IncreaseYukoScore(_scoreBlue))">@(_scoreBlue[0])</div>
                <div class="col-3" @oncontextmenu="@(() => RemoveShido(_scoreBlue))" @oncontextmenu:preventDefault @onclick="@(() => AddShido(_scoreBlue))"><img src="@ShidoImages[_scoreBlue[SHIDO]]" alt="" width="100px"></div>
            </div>
        </div>
        <div>
            <div  class="row" style="background-color: @_bgColour;font-size: 15em; color: white;">
                <div class="col-3" style="text-align: center" @onclick='()=> ToggleOsaekomi("white")'>
                    <div hidden="@(_hiddenWhite)"> @_osaekomiCount</div>
                </div>
                <div @onclick="ToggleTime" class="col-6 vh-40 align-middle text-center user-select-none">
                    @_currentCount.ToString("mm\\:ss")
                </div>
                <div class="col-3" style="text-align: center" @onclick='()=> ToggleOsaekomi("blue")'>
                    <div hidden="@(_hiddenBlue)">
                        @_osaekomiCount
                    </div>
                </div>

            </div>

        </div>

    </div>
</div>


@code {

    private HotKeysContext? _hotKeysContext;
    
    private bool showModal = false;

        private const int IPPON = 2;
        private const int WAZARI = 1;
        private const int YUKO = 0;
        private const int SHIDO = 3;
    private List<int> _scoreBlue = new() { 0, 0, 0 , 0};
    private List<int> _scoreWhite = new() { 0, 0, 0, 0};
    private string _bgColour;
    private TimeSpan _currentCount;
    private Timer _timer;
    private Timer _osaekomiTimer;
    private bool _hiddenWhite = true;
    private bool _hiddenBlue = true;
    private string _currentOsaekomiTori = "";
    private int _osaekomiCount = 0;
    private bool _isGoldenScore = false;
    private string ShidoImage;
    private string[] ShidoImages =
    [
        "",
        "/Images/OneShido.png",
        "/Images/TwoShido.png",
        "/Images/Hansokumake.png"
    ];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _osaekomiTimer = new Timer();
        
        _currentCount = TimeSpan.FromSeconds(4);
        _bgColour = "red";
        _timer = new Timer();
        

        _osaekomiTimer.Interval = 1000;
        _timer.Interval = 1000;
        _timer.Elapsed += async (object? sender, ElapsedEventArgs e) =>
        {
            _currentCount -= TimeSpan.FromSeconds(1);
            if (_currentCount is { Minutes: 0, Seconds: 0 } )
            {
               ToggleTime();
                _isGoldenScore = true;
            }
            
            await InvokeAsync(StateHasChanged);
        };
        
        _osaekomiTimer.Elapsed += async (object? sender, ElapsedEventArgs e) =>
        {
            _osaekomiCount++;

            if (_osaekomiCount is >= 10 and < 20)
            {
                if (_scoreBlue[WAZARI] == 1 && _currentOsaekomiTori == "blue")
                {
                    _scoreBlue[IPPON] = 1;
                    _scoreBlue[WAZARI] = 0;
                    ToggleTime();
                }
                if (_scoreWhite[WAZARI] == 1 && _currentOsaekomiTori == "white")
                {
                    _scoreWhite[IPPON] = 1;
                    _scoreWhite[WAZARI] = 0;
                    ToggleTime();
                }
            }
            if (_osaekomiCount >= 20)
            {
                _osaekomiTimer.Stop();
                if (_currentOsaekomiTori == "blue")
                {
                    _scoreBlue[IPPON] = 1;
                }
                else
                {
                    _scoreWhite[IPPON] = 1;
                }

                ToggleTime();
            }
            
            await InvokeAsync(StateHasChanged);
        };
    }

    private void IncreaseYukoScore(List<int> score)
    {
        if (score[2] == 0)
        {
            score[0]++;
        }
    }

    private void DecreaseYukoScore(List<int> score)
    {
        if (score[2] == 0)
        {
            if (score[0] > 0)
            {
                score[0]--;
            }
        }
    }

    private void IncreaseIpponScore(List<int> score)
    {
        if (score[IPPON] == 0)
        {
            score[IPPON]++;
            ToggleTime();
        }
    }

    private void DecreaseIpponScore(List<int> score)
    {
        if (score[IPPON] == 1)
        {
            score[IPPON]--;
        }
    }

    private void IncreaseWazariScore(List<int> score)
    {
        if (score[WAZARI] == 0 && score[IPPON] == 0)
        {
            score[1]++;
        }
        else if (score[WAZARI] == 1 && score[IPPON] == 0)
        {
            score[1] = 0;
            score[2] = 1;
            ToggleTime();
        }
    }

    private void DecreaseWazariScore(List<int> score)
    {
        if (score[1] == 1)
        {
            score[1]--;
        }
    }

    private void ToggleOsaekomi(string tori)
    {
        if (_timer.Enabled)
        {
            if (!_osaekomiTimer.Enabled)
            {
                _osaekomiTimer.Start();
                _osaekomiCount = 0;
            }
            else if(_currentOsaekomiTori == tori)
            {
                
                _osaekomiTimer.Stop();
                if (_osaekomiCount >= 5 && _osaekomiCount < 10)
                {
                    if (_currentOsaekomiTori=="blue")
                    {
                        _scoreBlue[YUKO]++;
                    }
                    else
                    {
                        _scoreWhite[YUKO]++;
                    }
                }
                
                if (_osaekomiCount >= 10 && _osaekomiCount < 20)
                {
                    if (_currentOsaekomiTori=="blue")
                    {
                        _scoreBlue[WAZARI]++;
                    }
                    else
                    {
                        _scoreWhite[WAZARI]++;
                    }
                }
            }
            
            if (tori == "white")
            {
                _hiddenBlue = true;
                _hiddenWhite = false;
            }
            
            if (tori == "blue")
            {
                _hiddenBlue = false;
                _hiddenWhite = true;
            }
            
            _currentOsaekomiTori = tori;
        }
    }

    private void ToggleTime()
    {
        if (_bgColour == "red")
        {
            _bgColour = "green";
        }
        else
        {
            _bgColour = "red";
        }

        _timer.Enabled = !_timer.Enabled;
        if (_timer.Enabled)
        {
            _hiddenBlue = true;
            _hiddenWhite = true;
        }
        _osaekomiTimer.Stop();
    }

    private void AddShido(List<int> score)
    {
        if(score[SHIDO]>=3)
            return;
        ShidoImage = ShidoImages[++score[SHIDO]];
    }
    
    private void RemoveShido(List<int> score)
    {
        if(score[SHIDO]<=0)
            return;
        ShidoImage = ShidoImages[--score[SHIDO]];
    }
    
    private void TogglePanel()
    {
       
            showModal = !showModal;
            StateHasChanged();
        
    }
    
    private void AdjustTime(int deltaSeconds)
    {
        var newtime = _currentCount.Add(TimeSpan.FromSeconds(deltaSeconds));
        if (newtime.TotalSeconds > 0)
        {
            _currentCount = newtime;
        } 
        
        
        StateHasChanged();
        
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _hotKeysContext = HotKeys.CreateContext()
                .Add(ModCode.Ctrl, Code.T, TogglePanel);
        }
    }
    
   
    public async ValueTask DisposeAsync()
    {
        if (_hotKeysContext is not null)
        {
            await _hotKeysContext.DisposeAsync();
        }
    }

}
