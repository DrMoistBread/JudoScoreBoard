@page "/"
@implements IAsyncDisposable
@inject HotKeys HotKeys
@using Toolbelt.Blazor.HotKeys2
@inject IJSRuntime JsRuntime;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@inject ScoreBoard ScoreBoard


<audio id="sound" src="Sounds/bell.mp3"/>

@if (_showModal)
{
    <div class="modal-backdrop-ui">
        <div class="modal-content-ui">
            <h4>Ajustar Tempo</h4>
            <div class="modal-content-time"> @ScoreBoard.GetMatchTime().ToString("mm\\:ss")</div>
            <div style="display: flex; gap: 10px; flex-wrap: wrap; justify-content: center; margin-top: 1rem;">
                <button class="fancy-button" @onclick="() => AdjustTime(60)">+1 min</button>
                <button class="fancy-button" @onclick="() => AdjustTime(-60)">-1 min</button>
                <button class="fancy-button" @onclick="() => AdjustTime(10)">+10 sec</button>
                <button class="fancy-button" @onclick="() => AdjustTime(-10)">-10 sec</button>
                <button class="fancy-button" @onclick="() => AdjustTime(1)">+1 sec</button>
                <button class="fancy-button" @onclick="() => AdjustTime(-1)">-1 sec</button>
                <button class="fancy-button" @onclick="TogglePanel">Fechar</button>
            </div>

        </div>
    </div>
}
<div class="full-page" style="background-color: @_bgColour">
    <div class="scoreboard-container">

        <div class="scoreboard-side white-side">

            <div class="score-value-row @_flashWhiteClass">
                <div class="score-value"
                     @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Ippon, Player.White))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Ippon, Player.White))">
                    @ScoreBoard.GetScoreWhite(Score.Ippon)
                </div>
                <div class="score-value"
                     @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Wazari, Player.White))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Wazari, Player.White))">
                    @ScoreBoard.GetScoreWhite(Score.Wazari)
                </div>
                <div class="score-value"
                     @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Yuko, Player.White))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Yuko, Player.White))">
                    @ScoreBoard.GetScoreWhite(Score.Yuko)
                </div>
                <div class="score-value" @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Shido,Player.White))"
                @oncontextmenu:preventDefault @onclick="@(() => ScoreBoard.IncreaseScore(Score.Shido, Player.White))">
                <img src="@_shidoImages[ScoreBoard.GetScoreWhite(Score.Shido)]" alt="" width="100px">
                </div>
            </div>
        </div>
        <div class="scoreboard-side blue-side" style=" color: white">
            <div class="score-value-row @_flashBlueClass">
                <div class="score-value"
                     @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Ippon, Player.Blue))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Ippon, Player.Blue))">
                    @ScoreBoard.GetScoreBlue(Score.Ippon)
                </div>
                <div class="score-value"
                     @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Wazari, Player.Blue))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Wazari, Player.Blue))">
                    @(ScoreBoard.GetScoreBlue(Score.Wazari))
                </div>
                <div class="score-value"
                     @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Yuko, Player.Blue))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Yuko, Player.Blue))">
                    @(ScoreBoard.GetScoreBlue(Score.Yuko))
                </div>
                <div class="score-value" @oncontextmenu="@(() => ScoreBoard.DecreaseScore(Score.Shido, Player.Blue))"
                     @oncontextmenu:preventDefault
                     @onclick="@(() => ScoreBoard.IncreaseScore(Score.Shido, Player.Blue))">
                    
                    <img src="@_shidoImages[ScoreBoard.GetScoreBlue(Score.Shido)]"
                         alt=""
                         width="100px">
                </div>
            </div>
        </div>

    </div>
    <div class="timer-bar row" style="background-color: @_bgColour;color:@_timerColour">
        <div class="col-3 vh-40 align-middle text-center user-select-none" style="text-align: center; height: 200px;"
             @onclick='()=> ScoreBoard.OsaekomiTimer.ToggleAsync(Player.White)'>
            <div hidden="@(_hiddenWhite)"> @ScoreBoard.OsaekomiTimer.CurrentCount</div>
        </div>
        <div @onclick="ToogleMatchTimer" class="col-6 vh-40 align-middle text-center user-select-none">
            <div style="font-size: 8rem;margin-top: -3rem">@ScoreBoard.GetMatchTime().ToString("mm\\:ss")</div>
            <div 
                style="font-size: 1rem;margin-top: -2rem">@(ScoreBoard.Timer.IsGoldenScore ? "GOLDEN SCORE" : "")</div>
        </div>
        <div class="col-3 vh-40 align-middle text-center user-select-none" style="text-align: center; height: 200px;"
             @onclick='()=> ScoreBoard.OsaekomiTimer.ToggleAsync(Player.Blue)'>
            <div hidden="@(_hiddenBlue)">
                @ScoreBoard.OsaekomiTimer.CurrentCount
            </div>
        </div>
    </div>

</div>


@code {

    private HotKeysContext? _hotKeysContext;

    private bool _showModal = false;

    private string? _bgColour;
    private string? _timerColour;
    private const string? GoldenScoreTimerColour = "#d6b031";
    private const string TimerRunningColour = "green";
    private const string TimerStoppedColour = "red";
    

    private bool _hiddenWhite = true;
    private bool _hiddenBlue = true;

    private string[] _shidoImages =
    [
        "",
        "/Images/OneShido.png",
        "/Images/TwoShido.png",
        "/Images/Hansokumake.png"
    ];

    private string _flashWhiteClass = "";
    private string _flashBlueClass = "";

    private async Task TriggerWhiteFlashAsync()
    {
        _flashWhiteClass = "flash-effect";
        await InvokeAsync(StateHasChanged);

        await Task.Delay(3000); // 3 flashes × 0.5s
        _flashWhiteClass = "";
        await InvokeAsync(StateHasChanged);
    }

    private async Task Refresh()
    {
        if (ScoreBoard.HasWinner())
        {
            await ScoreBoard.Timer.StopTimer();
            await JsRuntime.InvokeAsync<string>("PlayAudio", "sound");
        }
        
        if (ScoreBoard.IsBlueWinner())
        {
            TriggerBlueFlashAsync();
        }
        else if (ScoreBoard.IsWhiteWinner())
        {
            TriggerWhiteFlashAsync();
        }

        SetTimerBackground(ScoreBoard.Timer.IsRunning());
        
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ScoreBoard.OnTimeChanged -= Refresh;
        ScoreBoard.Timer.OnTimeChanged -= Refresh;
        ScoreBoard.Timer.StopTimer();
    }

    private async Task TriggerBlueFlashAsync()
    {
        _flashBlueClass = "flash-effect";
        await InvokeAsync(StateHasChanged);

        await Task.Delay(3000); // 3 flashes × 0.5s
        _flashBlueClass = "";
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _hotKeysContext = HotKeys.CreateContext()
                .Add(ModCode.Ctrl, Code.T, TogglePanel);

            var startingTime = await LocalStorage.GetItemAsync<TimeSpan>("timer");
            if (startingTime is { Minutes: 0, Seconds: 0 })
            {
                startingTime = TimeSpan.FromMinutes(4);
            }

            ScoreBoard.Timer.InitializeTimer(startingTime);


            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ScoreBoard.OnTimeChanged += Refresh;
        ScoreBoard.Timer.OnTimeChanged += Refresh;
        ScoreBoard.OsaekomiTimer.OnTimeChanged += RefreshOsaekomi;

        _bgColour = TimerStoppedColour;


        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshOsaekomi(Player? player)
    {
        switch (player)
        {
            case Player.Blue:
                _hiddenBlue = false;
                _hiddenWhite = true;
                break;
            case Player.White:
                _hiddenWhite = false;
                _hiddenBlue = true;
                break;
        }

        await InvokeAsync(StateHasChanged);
    }
    
    private void TogglePanel()
    {
        _showModal = !_showModal;
        StateHasChanged();
    }

    private async Task AdjustTime(int deltaSeconds)
    {
        var newDefaultTimer = ScoreBoard.SetMatchTime(deltaSeconds);

        await LocalStorage.SetItemAsync("timer", newDefaultTimer);

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hotKeysContext is not null)
        {
            await _hotKeysContext.DisposeAsync();
        }
    }

    private async Task ToogleMatchTimer()
    {
        var isTimerRunning = await ScoreBoard.Timer.ToggleTimer();
        if (isTimerRunning)
        {
            _hiddenBlue = true;
            _hiddenWhite = true;
        }
        
        if (!isTimerRunning && ScoreBoard.OsaekomiTimer.IsRunning())
        {
            await ScoreBoard.OsaekomiTimer.StopAsync();
        }
        
        SetTimerBackground(isTimerRunning);

        await InvokeAsync(StateHasChanged);
    }

    private void SetTimerBackground(bool isTimerRunning)
    {
        var runningColour = ScoreBoard.Timer.IsGoldenScore ? GoldenScoreTimerColour : TimerRunningColour;
        _timerColour = ScoreBoard.Timer.IsGoldenScore && isTimerRunning ? "#333131FF" : "white";
        _bgColour = isTimerRunning ? runningColour : TimerStoppedColour;
    }

}
